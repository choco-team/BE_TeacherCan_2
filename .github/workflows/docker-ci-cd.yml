name: Docker CI/CD
on:
  push:
    branches: [ main, dev ]  # main과 dev 브랜치 모두 워크플로우 트리거

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # 브랜치에 따라 환경 선택
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}
   
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
   
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
   
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
   
    - name: Set Docker tag
      id: set-tag
      run: |
        if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
          echo "TAG=latest" >> $GITHUB_OUTPUT
        else
          echo "TAG=dev" >> $GITHUB_OUTPUT
        fi
   
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:${{ steps.set-tag.outputs.TAG }}
   
    - name: Deploy to GCP VM
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.GCP_VM_IP }}
        username: ${{ secrets.GCP_VM_USERNAME }}
        key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
        script: |
          # 컨테이너 이름과 포트 설정
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            CONTAINER_NAME="nginx-app"
            PORT_MAPPING="80:80"
          else
            CONTAINER_NAME="nginx-app-test"
            PORT_MAPPING="8080:80"  # 테스트 환경은 8080 포트 사용
          fi
          
          # 기존 컨테이너 중지 및 제거
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
         
          # 최신 이미지 가져오기
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:${{ steps.set-tag.outputs.TAG }}
         
          # VM에 환경 변수 파일 생성/업데이트
          ENV_PATH="/opt/app"
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            ENV_PATH="/opt/app-test"  # 테스트 환경은 별도 디렉토리 사용
          fi
          
          sudo mkdir -p $ENV_PATH
          sudo bash -c "cat > $ENV_PATH/.env << EOL
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          LOCAL=${{ secrets.LOCAL }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}
          SITE_URL=${{ secrets.SITE_URL }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_URL=${{ secrets.OPENAI_URL }}
          LLM_MODEL=${{ secrets.LLM_MODEL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PORT=${{ secrets.PORT }}
          EOL"
         
          sudo mkdir -p $ENV_PATH/ssl
          sudo cp /etc/letsencrypt/live/api.teachercan.com/fullchain.pem $ENV_PATH/ssl/
          sudo cp /etc/letsencrypt/live/api.teachercan.com/privkey.pem $ENV_PATH/ssl/
          sudo chmod 644 $ENV_PATH/ssl/fullchain.pem
          sudo chmod 600 $ENV_PATH/ssl/privkey.pem         
          
          # Docker 실행 시 이 디렉토리를 마운트
          docker run -d \
            --name $CONTAINER_NAME \
            -p $PORT_MAPPING \
            -p 443:443 \
            -v $ENV_PATH/.env:/.env:ro \
            -v $ENV_PATH/ssl:/etc/nginx/ssl:ro \
            --restart always \
            ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:${{ steps.set-tag.outputs.TAG }}           
            
          # 사용하지 않는 이미지 정리
          docker image prune -a -f