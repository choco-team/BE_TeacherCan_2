name: Deploy to Test Server

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:dev

      - name: Deploy to Test VM via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          script: |
            set -e  # 실패시 즉시 종료 (에러 감지용)

            APP_PATH="/opt/app-test"
            cd $APP_PATH || (mkdir -p $APP_PATH && cd $APP_PATH)

            echo "✅ Installing docker-compose if missing..."
            if ! [ -x "$(command -v docker-compose)" ]; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose || true
            fi
            docker-compose version

            echo "✅ Writing .env file..."
            sudo tee .env > /dev/null <<EOF
            DATABASE_HOST=mysql
            DATABASE_PORT=3306
            DATABASE_USER=${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            REDIS_HOST=redis
            REDIS_PORT=6379
            LOCAL=true
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}
            SITE_URL=${{ secrets.SITE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SERVER_PORT=${{ secrets.SERVER_PORT }}
            AES_KEY=${{ secrets.AES_KEY }}
            EOF

            echo "✅ Writing docker-compose.yml..."
            sudo tee docker-compose.yml > /dev/null <<'EOF'
            version: '3.8'
            services:
              redis:
                image: redis:7.2
                container_name: redis
                restart: always
                ports:
                  - "6379:6379"
                volumes:
                  - redis-data:/data
                command: ["redis-server", "--appendonly", "yes"]

              mysql:
                image: mysql:8.4
                container_name: mysql-dev
                restart: always
                ports:
                  - "3306:3306"
                environment:
                  MYSQL_DATABASE: \${DATABASE_NAME}
                  MYSQL_USER: \${DATABASE_USER}
                  MYSQL_PASSWORD: \${DATABASE_PASSWORD}
                  MYSQL_ROOT_PASSWORD: \${DATABASE_PASSWORD}
                volumes:
                  - mysql-data:/var/lib/mysql
                env_file:
                  - .env

              nginx-app-test:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:dev
                container_name: nginx-app-test
                restart: always
                ports:
                  - "80:80"
                env_file:
                  - .env
            volumes:
              redis-data:
              mysql-data:
            EOF

            echo "🛑 Stopping previous containers"
            docker-compose down || true

            echo "🚀 Pulling latest nginx-app-test image"
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:dev

            echo "🚀 Running docker-compose up with force recreate"
            docker-compose up -d --force-recreate

            echo "✅ Final container status:"
            docker ps -a

