name: Deploy to Test Server

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Test Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:dev

      - name: Deploy to GCP (Test)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          script: |
            CONTAINER_NAME="nginx-app-test"
            PORT_MAPPING="80:80"
            ENV_PATH="/opt/app-test"
            COMPOSE_PATH="/opt/app-test/docker-compose.yml"

            echo "Setting up environment files..."
            sudo mkdir -p $ENV_PATH
            sudo bash -c "cat > $ENV_PATH/.env << EOL
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_USER=${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            LOCAL=true
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}
            SITE_URL=${{ secrets.SITE_URL }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_URL=${{ secrets.OPENAI_URL }}
            LLM_MODEL=${{ secrets.LLM_MODEL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SERVER_PORT=${{ secrets.SERVER_PORT }}
            AES_KEY=${{ secrets.AES_KEY }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            EOL"

            echo "Copying docker-compose.yml to VM..."
            sudo bash -c "cat > $COMPOSE_PATH << EOC
            version: '3.8'
            services:
              redis:
                image: redis:7.2
                container_name: redis
                restart: always
                ports:
                  - '6379:6379'
                command: ['redis-server', '--appendonly', 'yes']
            EOC"

            echo "Ensuring Redis container is running..."
            docker compose -f $COMPOSE_PATH up -d

            echo "Stopping old container if exists..."
            docker rm -f $CONTAINER_NAME || true

            echo "Pulling new image and running app..."
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:dev

            docker run -d \
              --name $CONTAINER_NAME \
              -p $PORT_MAPPING \
              --env-file $ENV_PATH/.env \
              --restart always \
              ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:dev

            docker image prune -a -f
            echo "[DEBUG] Before removing:"
            docker ps -a

            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "[DEBUG] After removing:"
            docker ps -a

            echo "[DEBUG] Pulling image:"
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:dev

            echo "[DEBUG] Running new container:"
            docker run -d \
              --name $CONTAINER_NAME \
              -p $PORT_MAPPING \
              --env-file $ENV_PATH/.env \
              --restart always \
              ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-app:dev

            echo "[DEBUG] Final containers:"
            docker ps -a
